<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://www.plcopen.org/xml/tc6.xsd"
         xsi:schemaLocation="http://www.plcopen.org/xml/tc6.xsd"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <fileHeader companyName="Unknown"
                productName="Unnamed"
                productVersion="1"
                creationDateTime="2013-01-29T14:01:00"/>
    <contentHeader name="Unnamed"
                   modificationDateTime="2017-06-08T15:59:13">
        <coordinateInfo>
            <fbd>
                <scaling x="0" y="0"/>
            </fbd>
            <ld>
                <scaling x="0" y="0"/>
            </ld>
            <sfc>
                <scaling x="0" y="0"/>
            </sfc>
        </coordinateInfo>
    </contentHeader>
    <types>
        <pous>
            <pou name="SET_HOLDING_REAL" pouType="function" >
                <interface>
                    <returnType>
                        <INT/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                    <inputVars>
                        <variable name="IN_REAL">
                            <type>
                                <REAL/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                    <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 setU16Holding (u32 adr, u16 value);
                     u32 value = *(u32 *)(&IN_REAL);
                     u16 high = value;
                     u16 low = value >> 16;
                     SET_HOLDING_REAL = setU16Holding(ADDR, high);
                     SET_HOLDING_REAL = setU16Holding(ADDR + 1, low);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Set input REAL type variable in modbus holding registers]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="SET_HOLDING_WORD" pouType="function" >
                <interface>
                    <returnType>
                        <INT/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                    <inputVars>
                        <variable name="IN_WORD">
                            <type>
                                <WORD/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                    <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 setU16Holding (u32 adr, u16 value);
                     SET_HOLDING_WORD = setU16Holding(ADDR, IN_WORD);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Set input WORD type variable in modbus holding register]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="SET_HOLDING_LONG" pouType="function" >
                <interface>
                    <returnType>
                        <INT/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                    <inputVars>
                        <variable name="IN_DWORD">
                            <type>
                                <DWORD/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                    <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 setU16Holding (u32 adr, u16 value);
                     u16 high = IN_DWORD;
                     u16 low = IN_DWORD >> 16;
                     setU16Holding(ADDR, IN_DWORD);
                     SET_HOLDING_LONG = setU16Holding(ADDR + 1, (IN_DWORD >> 16));
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Set input WORD type variable in modbus holding register]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="GET_HOLDING_REAL" pouType="function">
                <interface>
                    <returnType>
                        <REAL/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u16 getU16Holding (u32 adr);
                     u16 higth, low;
                     u32 value;
                     low = getU16Holding(ADDR);
                     higth = getU16Holding(ADDR + 1);
                     value = (higth<< 16) | (low);
                     GET_HOLDING_REAL = *(float *)(& value);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Return REAL type variable from modbus holding registers]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="GET_HOLDING_WORD" pouType="function">
                <interface>
                    <returnType>
                        <WORD/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u16 getU16Holding (u32 adr);
                     GET_HOLDING_WORD = getU16Holding(ADDR);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Return WORD type variable from modbus holding register]]></xhtml:p>
                </documentation>
            </pou>

            <pou name="GET_HOLDING_LONG" pouType="function">
                <interface>
                    <returnType>
                        <DWORD/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u16 getU16Holding (u32 adr);
                     u16 high= getU16Holding(ADDR);
                     u16 low = getU16Holding(ADDR + 1);
                     GET_HOLDING_LONG = (low << 16) | high;
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Return WORD type variable from modbus holding register]]></xhtml:p>
                </documentation>
            </pou>

            <pou name="SET_INPUT_WORD" pouType="function">
                <interface>
                    <returnType>
                        <INT/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                    <inputVars>
                        <variable name="IN_WORD">
                            <type>
                                <WORD/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 setU16Input(u32 adr, u16 value);
                     SET_INPUT_WORD = setU16Input(ADDR, IN_WORD);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Set input WORD type variable in modbus input register]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="GET_INPUT_WORD" pouType="function">
                <interface>
                    <returnType>
                        <WORD/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u16 getU16Input (u32 adr);
                     GET_INPUT_WORD = getU16Input(ADDR);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Return WORD type variable from modbus input register]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="SET_COIL" pouType="function">
                <interface>
                    <returnType>
                        <INT/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                    <inputVars>
                        <variable name="COIL_VALUE">
                            <type>
                                <BOOL/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 setCoil (u32 adr, u8 value);
                     SET_COIL = setCoil(ADDR, COIL_VALUE);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Set input WORD type variable in modbus coil register]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="GET_COIL" pouType="function">
                <interface>
                    <returnType>
                        <BOOL/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 getCoil (u32 adr);
                     GET_COIL = getCoil(ADDR);
                     }}
                    ]]>
                    </ST>
                </body>
            </pou>
            <pou name="SET_DISC" pouType="function">
                <interface>
                    <returnType>
                        <INT/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                    <inputVars>
                        <variable name="DISC_VALUE">
                            <type>
                                <BOOL/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 setDisc (u32 adr, u8 value);
                     SET_DISC = setDisc(ADDR, DISC_VALUE);
                     }}
                    ]]>
                    </ST>
                </body>
                <documentation>
                    <xhtml:p><![CDATA[Return BOOL type variable from modbus input register]]></xhtml:p>
                </documentation>
            </pou>
            <pou name="GET_DISC" pouType="function">
                <interface>
                    <returnType>
                        <BOOL/>
                    </returnType>
                    <inputVars>
                        <variable name="ADDR">
                            <type>
                                <UINT/>
                            </type>
                        </variable>
                    </inputVars>
                </interface>
                <body>
                    <ST>
                        <![CDATA[
                     {{
                     #include <stdint.h>
                     typedef uint32_t u32;
                     typedef uint16_t u16;
                     typedef uint8_t u8;
                     extern u8 getDisc (u32 adr);
                     GET_DISC = getDisc(ADDR);
                     }}
                    ]]>
                    </ST>
                </body>
            </pou>
        </pous>
    </types>
    <instances>
        <configurations/>
    </instances>
</project>
